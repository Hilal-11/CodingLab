interface ProblemTopic {
    id: number | string,
    topic: string,
    totalProblems: number // <-- add this line
}

function getRandomProblems() {
  return Math.floor(Math.random() * (2000 - 100 + 1)) + 100;
}

export const problemTopic: ProblemTopic[] = [
  { "id": 1, "topic": "Array", totalProblems: getRandomProblems() },
  { "id": 2, "topic": "String", totalProblems: getRandomProblems() },
  { "id": 3, "topic": "Hash Table", totalProblems: getRandomProblems() },
  { "id": 4, "topic": "Dynamic Programming", totalProblems: getRandomProblems() },
  { "id": 5, "topic": "Math", totalProblems: getRandomProblems() },
  { "id": 6, "topic": "Sorting", totalProblems: getRandomProblems() },
  { "id": 7, "topic": "Greedy", totalProblems: getRandomProblems() },
  { "id": 8, "topic": "Depth-First Search", totalProblems: getRandomProblems() },
  { "id": 9, "topic": "Binary Search", totalProblems: getRandomProblems() },
  { "id": 10, "topic": "Database", totalProblems: getRandomProblems() },
  { "id": 11, "topic": "Matrix", totalProblems: getRandomProblems() },
  { "id": 12, "topic": "Bit Manipulation", totalProblems: getRandomProblems() },
  { "id": 13, "topic": "Tree", totalProblems: getRandomProblems() },
  { "id": 14, "topic": "Breadth-First Search", totalProblems: getRandomProblems() },
  { "id": 15, "topic": "Two Pointers", totalProblems: getRandomProblems() },
  { "id": 16, "topic": "Prefix Sum", totalProblems: getRandomProblems() },
  { "id": 17, "topic": "Heap (Priority Queue)", totalProblems: getRandomProblems() },
  { "id": 18, "topic": "Simulation", totalProblems: getRandomProblems() },
  { "id": 19, "topic": "Binary Tree", totalProblems: getRandomProblems() },
  { "id": 20, "topic": "Graph", totalProblems: getRandomProblems() },
  { "id": 21, "topic": "Counting", totalProblems: getRandomProblems() },
  { "id": 22, "topic": "Stack", totalProblems: getRandomProblems() },
  { "id": 23, "topic": "Sliding Window", totalProblems: getRandomProblems() },
  { "id": 24, "topic": "Design", totalProblems: getRandomProblems() },
  { "id": 25, "topic": "Enumeration", totalProblems: getRandomProblems() },
  { "id": 26, "topic": "Backtracking", totalProblems: getRandomProblems() },
  { "id": 27, "topic": "Union Find", totalProblems: getRandomProblems() },
  { "id": 28, "topic": "Number Theory", totalProblems: getRandomProblems() },
  { "id": 29, "topic": "Linked List", totalProblems: getRandomProblems() },
  { "id": 30, "topic": "Ordered Set", totalProblems: getRandomProblems() },
  { "id": 31, "topic": "Monotonic Stack", totalProblems: getRandomProblems() },
  { "id": 32, "topic": "Segment Tree", totalProblems: getRandomProblems() },
  { "id": 33, "topic": "Trie", totalProblems: getRandomProblems() },
  { "id": 34, "topic": "Combinatorics", totalProblems: getRandomProblems() },
  { "id": 35, "topic": "Bitmask", totalProblems: getRandomProblems() },
  { "id": 36, "topic": "Divide and Conquer", totalProblems: getRandomProblems() },
  { "id": 37, "topic": "Queue", totalProblems: getRandomProblems() },
  { "id": 38, "topic": "Recursion", totalProblems: getRandomProblems() },
  { "id": 39, "topic": "Geometry", totalProblems: getRandomProblems() },
  { "id": 40, "topic": "Binary Indexed Tree", totalProblems: getRandomProblems() },
  { "id": 41, "topic": "Memoization", totalProblems: getRandomProblems() },
  { "id": 42, "topic": "Hash Function", totalProblems: getRandomProblems() },
  { "id": 43, "topic": "Binary Search Tree", totalProblems: getRandomProblems() },
  { "id": 44, "topic": "Shortest Path", totalProblems: getRandomProblems() },
  { "id": 45, "topic": "String Matching", totalProblems: getRandomProblems() },
  { "id": 46, "topic": "Topological Sort", totalProblems: getRandomProblems() },
  { "id": 47, "topic": "Rolling Hash", totalProblems: getRandomProblems() },
  { "id": 48, "topic": "Game Theory", totalProblems: getRandomProblems() },
  { "id": 49, "topic": "Interactive", totalProblems: getRandomProblems() },
  { "id": 50, "topic": "Data Stream", totalProblems: getRandomProblems() },
  { "id": 51, "topic": "Suffix Array", totalProblems: getRandomProblems() },
  { "id": 52, "topic": "Fenwick Tree", totalProblems: getRandomProblems() },
  { "id": 53, "topic": "Disjoint Set", totalProblems: getRandomProblems() },
  { "id": 54, "topic": "Minimum Spanning Tree", totalProblems: getRandomProblems() },
  { "id": 55, "topic": "Network Flow", totalProblems: getRandomProblems() },
  { "id": 56, "topic": "AVL Tree", totalProblems: getRandomProblems() },
  { "id": 57, "topic": "Red-Black Tree", totalProblems: getRandomProblems() },
  { "id": 58, "topic": "Suffix Tree", totalProblems: getRandomProblems() },
  { "id": 59, "topic": "Bloom Filter", totalProblems: getRandomProblems() },
  { "id": 60, "topic": "Skip List", totalProblems: getRandomProblems() },
  { id: 61, topic: "KMP Algorithm", totalProblems: getRandomProblems() },
{ id: 62, topic: "Dijkstra's Algorithm", totalProblems: getRandomProblems() },
{ id: 63, topic: "Bellman-Ford Algorithm", totalProblems: getRandomProblems() },
{ id: 64, topic: "Floyd-Warshall Algorithm", totalProblems: getRandomProblems() },
{ id: 65, topic: "A* Search", totalProblems: getRandomProblems() },
{ id: 66, topic: "Patricia Trie", totalProblems: getRandomProblems() },
{ id: 67, topic: "Suffix Automaton", totalProblems: getRandomProblems() },
{ id: 68, topic: "Sparse Table", totalProblems: getRandomProblems() },
{ id: 69, topic: "Heavy-Light Decomposition", totalProblems: getRandomProblems() },
{ id: 70, topic: "Dancing Links", totalProblems: getRandomProblems() }
]